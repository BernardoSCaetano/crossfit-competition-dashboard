#!/usr/bin/env node
import crypto from "crypto";
import fs from "fs";
import path from "path";

const SUPABASE_URL =
  process.env.SUPABASE_URL ||
  process.env.REACT_APP_SUPABASE_URL ||
  process.argv[2];
const ANON_KEY =
  process.env.SUPABASE_ANON_KEY ||
  process.env.REACT_APP_SUPABASE_ANON_KEY ||
  process.argv[3];
const SERVICE_ROLE_KEY =
  process.env.SUPABASE_SERVICE_ROLE_KEY || process.argv[4];

if (!SUPABASE_URL || !ANON_KEY) {
  console.error(
    "Usage: SUPABASE_URL=... SUPABASE_SERVICE_ROLE_KEY=... REACT_APP_SUPABASE_ANON_KEY=... npm run env:write"
  );
  console.error(
    "At minimum provide SUPABASE_URL and ANON key (service key is for serverless only)."
  );
  process.exit(1);
}

const strongKey = crypto.randomBytes(32).toString("base64url");

const content = `# Auto-generated by scripts/writeEnv.mjs
# Client (CRA reads REACT_APP_* at build/runtime)
REACT_APP_SUPABASE_URL=${SUPABASE_URL}
REACT_APP_SUPABASE_ANON_KEY=${ANON_KEY}

# Serverless/API (never expose service key in the browser)
SUPABASE_URL=${SUPABASE_URL}
${
  SERVICE_ROLE_KEY
    ? `SUPABASE_SERVICE_ROLE_KEY=${SERVICE_ROLE_KEY}
`
    : ""
}# Temporary admin header (remove after judge JWT is enforced)
ADMIN_WRITE_KEY=${strongKey}
REACT_APP_ADMIN_WRITE_KEY=${strongKey}
`;

const target = path.resolve(process.cwd(), ".env.local");
fs.writeFileSync(target, content, { encoding: "utf8" });
console.log(`.env.local written to ${target}`);
