Owner actions (in order):

1) Create Supabase project (free tier ok)
- Copy Project URL, anon key, and service role key.
- Open SQL editor and run, in order:
  a) enable extension (usually already enabled on Supabase):
     ```sql
     create extension if not exists pgcrypto;
     ```
  b) supabase/schema.sql (tables + base RLS)
  c) supabase/policies_judges.sql (judges table + judge write policies)
  d) supabase/athletes_claim_and_policies.sql (unique indexes + claim RPC + self-update policy)

2) Configure environment variables
- In Vercel project settings (and local .env):
  REACT_APP_SUPABASE_URL=your_url
  REACT_APP_SUPABASE_ANON_KEY=your_anon_key
  SUPABASE_URL=your_url               # used by serverless API
  SUPABASE_SERVICE_ROLE_KEY=service_key
  ADMIN_WRITE_KEY=choose_a_strong_random_key
  REACT_APP_ADMIN_WRITE_KEY=the_same_random_key  # temporary, for Admin page header

2.1) Supabase Auth settings (Dashboard → Authentication → Providers)
- Enable Email (magic link/OTP)
- Set SITE URL to your deployed domain (and/or Vercel preview URL)
- Add authorized redirect URLs (your domain + preview) so magic links return to the app
- (Prod) Configure custom SMTP/sender if you want branded emails; Supabase default mailer is fine for testing

3) Deploy
- Push to feature/app-structure-dashboard (already set) to trigger Vercel.
- Visit /dashboard, /wods, /athletes to verify public reads.

4) Test secure write flow
- Visit /admin (temporary page)
- Insert a score using athlete_id + wod_id from your DB
- Confirm score appears on athlete page or via DB console

4.1) Judge accounts
- Create judge users by signing in (magic link) with judge emails
- Insert their user_id into public.judges (Table Editor or SQL)
  ```sql
  insert into public.judges (user_id) values ('<judge_user_id>');
  ```

5) Data entry bootstrap
- Insert baseline WODs and Athletes in Supabase (via Table Editor)
- Optionally import CSVs for faster setup

6) Security follow-ups (after initial validation)
- Rotate ADMIN_WRITE_KEY and move to proper judge auth (Supabase Auth + RLS)
- Add per-judge accounts and role-based policies
- Remove header-based fallback in /api/scores/upsert once JWT flow is validated
- Consider restricting athletes SELECT columns for public leaderboard views via a view + policy

7) Product polish
- Leaderboards per category with sorting
- Athlete search filters (category/team)
- WOD release schedule & countdowns
- Share card export on Athlete/WOD pages

---
Providers in use
- Frontend hosting: Vercel (static React app + serverless API at /api/scores/upsert)
- Backend/data: Supabase (managed Postgres + RLS). No other providers used.

Current auth state (temporary)
- Public reads enabled via RLS on wods/teams/athletes/scores (read-only).
- Writes go through /api/scores/upsert using SUPABASE_SERVICE_ROLE_KEY and a header ADMIN_WRITE_KEY. This is for staging only—replace as below before production.

Production readiness checklist (before going live)
1) Replace header secret with real auth
   - Enable Supabase Auth (email magic link) and create judge/admin users.
   - Add table judges(user_id uuid primary key).
   - Add RLS policies so only judges can insert/update scores.
   - Update /api/scores/upsert to verify Supabase JWT (Authorization: Bearer <token>) and check judges membership. Remove ADMIN_WRITE_KEY and REACT_APP_ADMIN_WRITE_KEY.
2) Lock down RLS precisely
   - Keep public SELECT on leaderboard views; restrict sensitive fields if needed.
   - Ensure UPDATE/INSERT/DELETE are denied by default unless policy permits.
3) Secrets & environments
   - Use separate Supabase projects or DB schemas for dev/prod.
   - Rotate SUPABASE_SERVICE_ROLE_KEY and ADMIN_WRITE_KEY after testing.
   - Ensure only serverless uses the service key; never expose it to the browser.
4) API hygiene
   - Add basic body validation, rate limiting (via middleware or edge), and CORS restrictions for /api routes.
   - Add structured logs for writes (who/when/what).
5) Operational checks
   - Set up Supabase backups and point-in-time recovery (PITR).
   - Add monitoring/alerts on Vercel and Supabase usage/errors.
6) Data model finalization
   - Confirm scoring types (time/reps/load), caps, tie-breaks columns.
   - Add indexes on (wod_id, rank) and (athlete_id, wod_id).
7) UI gating
   - Hide /admin behind auth guard; remove from nav; keep a direct link only for judges.
